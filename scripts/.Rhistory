heatplot(PTG_LDM_gsea, foldChange = gene_list) +
ggplot2::scale_fill_gradientn(colors = colorRampPalette(c("#660156" ,"#21908C", "#FDE725"))(200)) +
theme_classic() +
theme(axis.text.y = element_text( colour="black",size=12),
axis.text.x = element_text( colour="black",size=10, angle = 45, hjust = 1))
PTG_LDM_gsea
PTG_LDM_gsea@result
PTG_LDM_gsea@geneList
#png("~/t.gondi_dc/res/figures/fig3/heatplot_M6_M7.png", width = 30, height = 12, units = "cm", res = 600)
heatplot(PTG_LDM_gsea, foldChange = gene_list) +
ggplot2::scale_fill_gradientn(breaks = seq(-max(abs(PTG_LDM_gsea@geneList)), max(PTG_LDM_gsea@geneList), length.out = 200),colors = colorRampPalette(c("#660156" ,"#21908C", "#FDE725"))(201)) +
theme_classic() +
theme(axis.text.y = element_text( colour="black",size=12),
axis.text.x = element_text( colour="black",size=10, angle = 45, hjust = 1))
#png("~/t.gondi_dc/res/figures/fig3/heatplot_M6_M7.png", width = 30, height = 12, units = "cm", res = 600)
heatplot(PTG_LDM_gsea, foldChange = gene_list) +
ggplot2::scale_fill_gradientn(colors = colorRampPalette(c("#660156","#21908C", "white", "#FFF68F", "#FFD700"))(201)) +
theme_classic() +
theme(axis.text.y = element_text( colour="black",size=12),
axis.text.x = element_text( colour="black",size=10, angle = 45, hjust = 1))
PTG_LDM_gsea@result <- subset(PTG_LDM_gsea@result, PTG_LDM_gsea@result$Description %in% c("leukocyte cell-cell adhesion","response to interferon-beta","response to bacterium","positive regulation of hydrolase activity","negative regulation of cell motility","positive regulation of cysteine-type endopeptidase activity"))
#png("~/t.gondi_dc/res/figures/fig3/heatplot_M6_M7.png", width = 30, height = 12, units = "cm", res = 600)
heatplot(PTG_LDM_gsea, foldChange = gene_list) +
ggplot2::scale_fill_gradientn(colors = colorRampPalette(c("#660156","#21908C", "white", "#FFF68F", "#FFD700"))(201)) +
theme_classic() +
theme(axis.text.y = element_text( colour="black",size=12),
axis.text.x = element_text( colour="black",size=10, angle = 45, hjust = 1))
#png("~/t.gondi_dc/res/figures/fig3/treeplot_M6_M7.png", width = 47, height = 25, units = "cm", res = 600)
treeplot(edox2)  +
scale_color_gradientn("p-value",colors = colorRampPalette(c("#660156","#21908C", "white", "#FFF68F", "#FFD700"))(201),
#limits= c(min(edox2@result$p.adjust),  max(edox2@result$p.adjust)),
#breaks=c(min(edox2@result$pvalue) , 0, max(edox2@result$pvalue))
)
#png("~/t.gondi_dc/res/figures/fig3/treeplot_M6_M7.png", width = 47, height = 25, units = "cm", res = 600)
treeplot(edox2)  +
scale_color_gradientn("p-value",colors = colorRampPalette(c("#660156","#21908C", "#FFF68F", "#FFD700"))(201),
)
tab <- get.mouse.table(gr.1)
get.mouse.table <- function(gr, ann = go.table){
inf <- data.frame(clusters(gr)$membership)
colnames(inf) <- c("interaction_cluster")
inf$gene_symbol <- rownames(inf)
int.table <- ann[ann$gene_symbol %in% rownames(inf),]
mouse.int <- dplyr::left_join(int.table,inf, by = "gene_symbol")
return(mouse.int)
}
tab <- get.mouse.table(gr.1)
library(igraph)
f.KNN_mousetoxo = function(seed, K=3, Nsteps=2, cutoffValue=0.65){
# We first filter down the Top Interactors tables to the chosen number of interactors.
TopIntGenes2 = TopIntGenes[1:K,]
TopIntVal2 = TopIntVal[1:K,]
# We then remove interactors with a weight below 0.65.
if(cutoffValue<0){cutoffValue = 0; print("Warning: CutoffValue forced to 0!")}
x.remove = abs(TopIntVal2) < cutoffValue
TopIntGenes3 = TopIntGenes2; TopIntGenes3[x.remove] = NA
TopIntVal3 = TopIntVal2; TopIntVal3[x.remove] = NA
# Now we pick out the nearest neighbors, Nsteps steps away.
seed2 = seed
if(Nsteps>1){for(ii in 1:(Nsteps-1)){
seed2 = c(seed2,TopIntGenes3[,seed2])
seed2 = unique(seed2[!is.na(seed2)])
}}
TopIntGenes4 = TopIntGenes3[,seed2]
TopIntVal4 = TopIntVal3[,seed2]
# These objects are now transformed to an edgelist:
keep.x = !is.na(as.vector(TopIntGenes4))
elist1 = rep(colnames(TopIntGenes4), each=nrow(TopIntGenes4))[keep.x]
elist2 = as.vector(TopIntGenes4)[keep.x]
weights = as.vector(TopIntVal4)[keep.x]
# There may be different fancy packages to create interactive plots, but I will use a
# straightforward solution: igraph
gr.x = graph.data.frame(cbind(elist1,elist2), directed = T)
# You can plot this graph, but it doesn't look very good. There are many things we can do to improve it.
V(gr.x)$label.family = "sans"
V(gr.x)$label.cex = c(0.7)
V(gr.x)$label.font = c(2)
V(gr.x)$label.color = c("#333333")
#V(gr.x)$label.dist = c(-0.5)
#V(gr.x)$label.degree = pi/6
E(gr.x)$arrow.size = 0.5
E(gr.x)$width = abs(weights)*2
V(gr.x)$name = make.names(V(gr.x)$name)
#V(gr.x)$color[V(gr.x)$name %in% make.names(PTG_12h_markers)] = "#66CCFF"
#V(gr.x)$color[V(gr.x)$name %in% make.names(LDM_12h_markers)] = "yellow3"
V(gr.x)$color[V(gr.x)$name %in% make.names(colnames(TopIntGenes_mouse))] = "#66CCFF"
V(gr.x)$color[V(gr.x)$name %in% make.names(colnames(TopIntGenes_toxo))] = "yellow3"
V(gr.x)$frame.color[V(gr.x)$name %in% make.names(colnames(TopIntGenes_mouse))] = "#3399CC"
V(gr.x)$frame.color[V(gr.x)$name %in% make.names(colnames(TopIntGenes_toxo))] = "yellow4"
#V(gr.x)$shape[V(gr.x)$name %in% make.names(colnames(TopIntGenes_mouse))] = "circle"
#V(gr.x)$shape[V(gr.x)$name %in% make.names(colnames(TopIntGenes_toxo))] = "circle"
# We set the vertex sizes according to (minimum) distance from seed genes
dist.x = distances(gr.x)
for(ii in 1:ncol(dist.x)){dist.x[ii,ii] = NA}
dist.x = dist.x[rownames(dist.x)%in%seed,]
dist.x2 = apply(FUN=min, X=dist.x, MARGIN=2,na.rm=T)
V(gr.x)$size = 2+10*(2^-dist.x2[V(gr.x)$name])
# Color for interactions with positive correlations is set to red.
# Negative, if such exist, are colored blue.
E(gr.x)$color[weights>0] = "#CC3333"
E(gr.x)$color[weights<0] = "blue"
# We can also map information to colors and shape of vertices.
# There are two obvious options:
# 1) Different shapes for mouse and toxo, node colors according to a selected cluster from the umap.
# 2) Make each node a pie chart with one piece for each cluster. Then distinction between mouse
#    and toxo will have to be made some other way.
#
# I will leave this choice to a future discussion. For now, here is a simple function to translate
# numeric values into a color scale, like a typical heatmap.
f.TranslateToColor = function(val){
bins.x = seq(from=-max(abs(val),na.rm=T)-0.01, to=max(abs(val),na.rm=T)+0.01, length.out=101)
cval = c()
for(ii in 1:length(val)){cval[ii] = sum(bins.x<val[ii])}
cvec = colorRampPalette(c("blue", "dodgerblue", "white", "orange", "red"))(100)[cval]
if(is.matrix(val)){
cvec = matrix(cvec,nrow=nrow(val))
rownames(cvec) = rownames(val)
colnames(cvec) = colnames(val)
} else {
names(cvec) = names(val)
}
return(cvec)
}
par(mar=c(0,0,0,0)+.1)
plot(gr.x, asp = 0)
return(gr.x)
}
gr.1 <- f.KNN_mousetoxo(c(PTG_12h_markers,LDM_12h_markers), cutoffValue = 0.5, Nsteps = 2)
set.seed(3)
corM = bicor(t(M_toxo),t(M_mouse))
M_toxo <- as.data.frame(se.toxo@assays$SCT@counts)
#get pre-processed toxo matrix
se.toxo <- readRDS("~/t.gondi_dc/res/seurat-objects/toxo.object_150721.RDS")
#get preprocessed mouse matrix
M_mouse <- as.data.frame(se.dc.mus@assays$SCT@counts)
ncol(M_mouse)
#get pre-processed toxo matrix
se.toxo <- readRDS("~/t.gondi_dc/res/seurat-objects/toxo.object_150721.RDS")
ncol(M_toxo)
M_mouse <- dplyr::select(M_mouse, matches(colnames(M_toxo)))
M_toxo <- as.data.frame(se.toxo@assays$SCT@counts)
ncol(M_toxo)
M_mouse <- dplyr::select(M_mouse, matches(colnames(M_toxo)))
ncol(M_mouse)
M_toxo <- as.matrix(dplyr::select(M_toxo, matches(colnames(M_mouse))))
ncol(M_toxo)
M_mouse <- as.matrix(M_mouse)
set.seed(3)
corM = bicor(t(M_toxo),t(M_mouse))
corM[1:5,1:5]
hist(corM)
TopIntGenes_mouse = matrix(rownames(M_toxo)[apply(FUN=order, X=corM, MARGIN=2, decreasing=T, na.last=T)[1:20,]],nrow=20)
TopIntGenes_toxo = matrix(rownames(M_mouse)[apply(FUN=order, X=corM, MARGIN=1, decreasing=T, na.last=T)[1:20,]],nrow=20)
colnames(TopIntGenes_mouse) = rownames(M_mouse)
colnames(TopIntGenes_toxo) = rownames(M_toxo)
gr.1 <- f.KNN_mousetoxo(c(PTG_12h_markers,LDM_12h_markers), cutoffValue = 0.5, Nsteps = 2)
gr.1 <- f.KNN_mousetoxo(c(PTG_12h_markers,LDM_12h_markers), cutoffValue = 0.5, Nsteps = 2)
f.KNN_mousetoxo = function(seed, K=3, Nsteps=2, cutoffValue=0.65){
# We first filter down the Top Interactors tables to the chosen number of interactors.
TopIntGenes2 = TopIntGenes[1:K,]
TopIntVal2 = TopIntVal[1:K,]
# We then remove interactors with a weight below 0.65.
if(cutoffValue<0){cutoffValue = 0; print("Warning: CutoffValue forced to 0!")}
x.remove = abs(TopIntVal2) < cutoffValue
TopIntGenes3 = TopIntGenes2; TopIntGenes3[x.remove] = NA
TopIntVal3 = TopIntVal2; TopIntVal3[x.remove] = NA
# Now we pick out the nearest neighbors, Nsteps steps away.
seed2 = seed
if(Nsteps>1){for(ii in 1:(Nsteps-1)){
seed2 = c(seed2,TopIntGenes3[,seed2])
seed2 = unique(seed2[!is.na(seed2)])
}}
TopIntGenes4 = TopIntGenes3[,seed2]
TopIntVal4 = TopIntVal3[,seed2]
# These objects are now transformed to an edgelist:
keep.x = !is.na(as.vector(TopIntGenes4))
elist1 = rep(colnames(TopIntGenes4), each=nrow(TopIntGenes4))[keep.x]
elist2 = as.vector(TopIntGenes4)[keep.x]
weights = as.vector(TopIntVal4)[keep.x]
# There may be different fancy packages to create interactive plots, but I will use a
# straightforward solution: igraph
gr.x = graph.data.frame(cbind(elist1,elist2), directed = T)
# You can plot this graph, but it doesn't look very good. There are many things we can do to improve it.
V(gr.x)$label.family = "sans"
V(gr.x)$label.cex = c(0.7)
V(gr.x)$label.font = c(2)
V(gr.x)$label.color = c("#333333")
#V(gr.x)$label.dist = c(-0.5)
#V(gr.x)$label.degree = pi/6
E(gr.x)$arrow.size = 0.5
E(gr.x)$width = abs(weights)*2
V(gr.x)$name = make.names(V(gr.x)$name)
#V(gr.x)$color[V(gr.x)$name %in% make.names(PTG_12h_markers)] = "#66CCFF"
#V(gr.x)$color[V(gr.x)$name %in% make.names(LDM_12h_markers)] = "yellow3"
V(gr.x)$color[V(gr.x)$name %in% make.names(colnames(TopIntGenes_mouse))] = "#66CCFF"
V(gr.x)$color[V(gr.x)$name %in% make.names(colnames(TopIntGenes_toxo))] = "yellow3"
V(gr.x)$frame.color[V(gr.x)$name %in% make.names(colnames(TopIntGenes_mouse))] = "#3399CC"
V(gr.x)$frame.color[V(gr.x)$name %in% make.names(colnames(TopIntGenes_toxo))] = "yellow4"
#V(gr.x)$shape[V(gr.x)$name %in% make.names(colnames(TopIntGenes_mouse))] = "circle"
#V(gr.x)$shape[V(gr.x)$name %in% make.names(colnames(TopIntGenes_toxo))] = "circle"
# We set the vertex sizes according to (minimum) distance from seed genes
dist.x = distances(gr.x)
for(ii in 1:ncol(dist.x)){dist.x[ii,ii] = NA}
dist.x = dist.x[rownames(dist.x)%in%seed,]
dist.x2 = apply(FUN=min, X=dist.x, MARGIN=2,na.rm=T)
V(gr.x)$size = 2+10*(2^-dist.x2[V(gr.x)$name])
# Color for interactions with positive correlations is set to red.
# Negative, if such exist, are colored blue.
E(gr.x)$color[weights>0] = "#CC3333"
E(gr.x)$color[weights<0] = "blue"
# We can also map information to colors and shape of vertices.
# There are two obvious options:
# 1) Different shapes for mouse and toxo, node colors according to a selected cluster from the umap.
# 2) Make each node a pie chart with one piece for each cluster. Then distinction between mouse
#    and toxo will have to be made some other way.
#
# I will leave this choice to a future discussion. For now, here is a simple function to translate
# numeric values into a color scale, like a typical heatmap.
f.TranslateToColor = function(val){
bins.x = seq(from=-max(abs(val),na.rm=T)-0.01, to=max(abs(val),na.rm=T)+0.01, length.out=101)
cval = c()
for(ii in 1:length(val)){cval[ii] = sum(bins.x<val[ii])}
cvec = colorRampPalette(c("blue", "dodgerblue", "white", "orange", "red"))(100)[cval]
if(is.matrix(val)){
cvec = matrix(cvec,nrow=nrow(val))
rownames(cvec) = rownames(val)
colnames(cvec) = colnames(val)
} else {
names(cvec) = names(val)
}
return(cvec)
}
par(mar=c(0,0,0,0)+.1)
plot(gr.x, asp = 0)
return(gr.x)
}
gr.1 <- f.KNN_mousetoxo(c(PTG_12h_markers,LDM_12h_markers), cutoffValue = 0.5, Nsteps = 2)
gr.1 <- f.KNN_mousetoxo(c(PTG_12h_markers,LDM_12h_markers), cutoffValue = 0.5, Nsteps = 2)
TopIntGenes = cbind(TopIntGenes_mouse, TopIntGenes_toxo)
gr.1 <- f.KNN_mousetoxo(c(PTG_12h_markers,LDM_12h_markers), cutoffValue = 0.5, Nsteps = 2)
TopIntVal_mouse = matrix(ncol=ncol(TopIntGenes_mouse),nrow=nrow(TopIntGenes_mouse))
for(ii in 1:ncol(TopIntVal_mouse)){TopIntVal_mouse[,ii] = corM[TopIntGenes_mouse[,ii],ii]}
TopIntVal_toxo = matrix(ncol=ncol(TopIntGenes_toxo),nrow=nrow(TopIntGenes_toxo))
for(ii in 1:ncol(TopIntVal_toxo)){TopIntVal_toxo[,ii] = corM[ii,TopIntGenes_toxo[,ii]]}
#combine matrices
TopIntGenes = cbind(TopIntGenes_mouse, TopIntGenes_toxo)
TopIntVal = cbind(TopIntVal_mouse, TopIntVal_toxo)
colnames(TopIntVal) = colnames(TopIntGenes)
gr.1 <- f.KNN_mousetoxo(c(PTG_12h_markers,LDM_12h_markers), cutoffValue = 0.5, Nsteps = 2)
LDM_12h_markers <- subset(cellclass.markers, cellclass.markers$cluster == "LDM_12h")
se.dc.mus <- SetIdent(se.dc.mus, value = "cell_class")
cellclass.markers <- FindAllMarkers(se.dc.mus)
cellclass.markers <- FindAllMarkers(se.dc.mus, logfc.threshold = 0.5)
se.dc.mus <- SetIdent(se.dc.mus, value = "seurat_clusters")
LDM_12h_markers <- subset(cellclass.markers, cellclass.markers$cluster == "LDM_12h")
LDM_12h_markers <- subset(LDM_12h_markers$gene, LDM_12h_markers$p_val_adj < 0.05)
LDM_3h_markers <- subset(cellclass.markers, cellclass.markers$cluster == "LDM_3h")
LDM_3h_markers <- subset(LDM_3h_markers$gene, LDM_3h_markers$p_val_adj < 0.05)
PTG_12h_markers <- subset(cellclass.markers, cellclass.markers$cluster == "PTG_12h")
PTG_12h_markers <- subset(PTG_12h_markers$gene,  PTG_12h_markers$p_val_adj < 0.05)
PTG_3h_markers <- subset(cellclass.markers, cellclass.markers$cluster == "PTG_3h")
PTG_3h_markers <- subset(PTG_3h_markers$gene, PTG_3h_markers$p_val_adj < 0.05)
#make list for each toxo-condition and plot them in a table
prr_list <- list(gene.set_LPS, gene.set_PAM, gene.set_cpGB, gene.set_HMW, gene.set_cGAMP, gene.set_Sev, gene.set_zymosan)
prr_unique <- set_names(list(LPS_unique, Pam_unique, cpGB_unique, HMW_unique, cGAMP_unique, Sev_unique, zymosan_unique), nm = c("LPS", "prr", "cpGB", "HMW", "cGAMP", "SeV", "Zymosan"))
PTG_12h_int <- set_names(sapply(prr_unique, function(x){
intersect(PTG_12h_markers, x)
}), nm = c("LPS", "PAM", "cpGB", "HMW", "cGAMP", "SeV", "Zymosan"))
PTG_3h_int <- set_names(sapply(prr_unique, function(x){
intersect(PTG_3h_markers, x)
}), nm = c("LPS", "PAM", "cpGB", "HMW", "cGAMP", "SeV", "Zymosan"))
LDM_3h_int <- set_names(sapply(prr_unique, function(x){
intersect(LDM_3h_markers, x)
}), nm = c("LPS", "PAM", "cpGB", "HMW", "cGAMP", "SeV", "Zymosan"))
PTG_12h_int
PTG_12h_int
LDM_12h_int
LDM_3h_int
PTG_3h_int
PTG_12h_int
PTG_3h_int
LDM_12h_int
LDM_12h_int <- set_names(sapply(prr_unique, function(x){
intersect(LDM_12h_markers, x)
}), nm = c("LPS", "PAM", "cpGB", "HMW", "cGAMP", "SeV", "Zymosan"))
LDM_12h_int
LDM_3h_int
overlap <- data.frame(PTG_3h = sapply(PTG_3h_int, function(x){length(x)}), PTG_12h = sapply(PTG_12h_int, function(x){length(x)}), LDM_3h = sapply(LDM_3h_int, function(x){length(x)}), LDM_12h = sapply(LDM_12h_int, function(x){length(x)}) )
overlap$PRR <- rownames(overlap)
overlap <- gather(overlap, "condition", value = "nGenes", 1:4)
overlap
update_geom_defaults("point",list(size=3))
#Export figure for figure 2
ggplot(overlap, aes(PRR, nGenes, color = condition)) +
geom_point(position = position_dodge(width=0.3), na.rm = T) +
scale_color_manual(values = cell.cols[c(2,3,6,7)]) +
theme_classic()
LDM_12h_markers <- subset(cellclass.markers, cellclass.markers$cluster == "LDM_12h")
LDM_12h_markers <- subset(LDM_12h_markers$gene, LDM_12h_markers$p_val_adj < 0.05)
LDM_3h_markers <- subset(cellclass.markers, cellclass.markers$cluster == "LDM_3h")
LDM_3h_markers <- subset(LDM_3h_markers$gene, LDM_3h_markers$p_val_adj < 0.05)
PTG_12h_markers <- subset(cellclass.markers, cellclass.markers$cluster == "PTG_12h")
PTG_12h_markers <- subset(PTG_12h_markers$gene,  PTG_12h_markers$p_val_adj < 0.05)
PTG_3h_markers <- subset(cellclass.markers, cellclass.markers$cluster == "PTG_3h")
PTG_3h_markers <- subset(PTG_3h_markers$gene, PTG_3h_markers$p_val_adj < 0.05)
#make list for each toxo-condition and plot them in a table
prr_list <- list(gene.set_LPS, gene.set_PAM, gene.set_cpGB, gene.set_HMW, gene.set_cGAMP, gene.set_Sev, gene.set_zymosan)
prr_unique <- set_names(list(LPS_unique, Pam_unique, cpGB_unique, HMW_unique, cGAMP_unique, Sev_unique, zymosan_unique), nm = c("LPS", "prr", "cpGB", "HMW", "cGAMP", "SeV", "Zymosan"))
PTG_12h_int <- set_names(sapply(prr_unique, function(x){
intersect(PTG_12h_markers, x)
}), nm = c("LPS", "PAM", "cpGB", "HMW", "cGAMP", "SeV", "Zymosan"))
PTG_3h_int <- set_names(sapply(prr_unique, function(x){
intersect(PTG_3h_markers, x)
}), nm = c("LPS", "PAM", "cpGB", "HMW", "cGAMP", "SeV", "Zymosan"))
LDM_12h_int <- set_names(sapply(prr_unique, function(x){
intersect(LDM_12h_markers, x)
}), nm = c("LPS", "PAM", "cpGB", "HMW", "cGAMP", "SeV", "Zymosan"))
PTG_12h_int
PTG_12h_int
LDM_12h_int
LDM_3h_int
overlap$PRR <- rownames(overlap)
overlap <- gather(overlap, "condition", value = "nGenes", 1:4)
update_geom_defaults("point",list(size=3))
#Export figure for figure 2
ggplot(overlap, aes(PRR, nGenes, color = condition)) +
geom_point(position = position_dodge(width=0.3), na.rm = T) +
scale_color_manual(values = cell.cols[c(2,3,6,7)]) +
theme_classic()
se.dc.mus <- SetIdent(se.dc.mus, value = "cell_class")
cellclass.markers <- FindAllMarkers(se.dc.mus, logfc.threshold = 0.5)
se.dc.mus <- SetIdent(se.dc.mus, value = "seurat_clusters")
#identify differential expressed genes for each original condition
LDM_12h_markers <- subset(cellclass.markers, cellclass.markers$cluster == "LDM_12h")
LDM_12h_markers <- subset(LDM_12h_markers$gene, LDM_12h_markers$p_val_adj < 0.05)
LDM_3h_markers <- subset(cellclass.markers, cellclass.markers$cluster == "LDM_3h")
LDM_3h_markers <- subset(LDM_3h_markers$gene, LDM_3h_markers$p_val_adj < 0.05)
PTG_12h_markers <- subset(cellclass.markers, cellclass.markers$cluster == "PTG_12h")
PTG_12h_markers <- subset(PTG_12h_markers$gene,  PTG_12h_markers$p_val_adj < 0.05)
PTG_3h_markers <- subset(cellclass.markers, cellclass.markers$cluster == "PTG_3h")
PTG_3h_markers <- subset(PTG_3h_markers$gene, PTG_3h_markers$p_val_adj < 0.05)
#Look at intersection differential expressed genes
#make list for each toxo-condition and plot them in a table
prr_list <- list(gene.set_LPS, gene.set_PAM, gene.set_cpGB, gene.set_HMW, gene.set_cGAMP, gene.set_Sev, gene.set_zymosan)
prr_unique <- set_names(list(LPS_unique, Pam_unique, cpGB_unique, HMW_unique, cGAMP_unique, Sev_unique, zymosan_unique), nm = c("LPS", "prr", "cpGB", "HMW", "cGAMP", "SeV", "Zymosan"))
PTG_12h_int <- set_names(sapply(prr_unique, function(x){
intersect(PTG_12h_markers, x)
}), nm = c("LPS", "PAM", "cpGB", "HMW", "cGAMP", "SeV", "Zymosan"))
PTG_3h_int <- set_names(sapply(prr_unique, function(x){
intersect(PTG_3h_markers, x)
}), nm = c("LPS", "PAM", "cpGB", "HMW", "cGAMP", "SeV", "Zymosan"))
LDM_12h_int <- set_names(sapply(prr_unique, function(x){
intersect(LDM_12h_markers, x)
}), nm = c("LPS", "PAM", "cpGB", "HMW", "cGAMP", "SeV", "Zymosan"))
LDM_3h_int <- set_names(sapply(prr_unique, function(x){
intersect(LDM_3h_markers, x)
}), nm = c("LPS", "PAM", "cpGB", "HMW", "cGAMP", "SeV", "Zymosan"))
PTG_12h_int
PTG_12h_int
PTG_3h_int
LDM_12h_int
LDM_3h_int
overlap <- data.frame(PTG_3h = sapply(PTG_3h_int, function(x){length(x)}), PTG_12h = sapply(PTG_12h_int, function(x){length(x)}), LDM_3h = sapply(LDM_3h_int, function(x){length(x)}), LDM_12h = sapply(LDM_12h_int, function(x){length(x)}) )
overlap$PRR <- rownames(overlap)
overlap <- gather(overlap, "condition", value = "nGenes", 1:4)
overlap
update_geom_defaults("point",list(size=3))
#Export figure for figure 2
ggplot(overlap, aes(PRR, nGenes, color = condition)) +
geom_point(position = position_dodge(width=0.3), na.rm = T) +
scale_color_manual(values = cell.cols[c(2,3,6,7)]) +
theme_classic()
gr.1 <- f.KNN_mousetoxo(c(PTG_12h_markers), cutoffValue = 0.5, Nsteps = 2)
gr.2 <- f.KNN_mousetoxo(c(LDM_12h_markers), cutoffValue = 0.5, Nsteps = 2)
tab <- get.mouse.table(gr.1)
go.table.tg$ensembl_gene_id <- gsub("_", ".",go.table.tg$ensembl_gene_id)
listMarts(host = "protists.ensembl.org")
protist.mart <- useMart(biomart = "protists_mart", host = "https://protists.ensembl.org", port= 443)
listDatasets(protist.mart)
toxo.mart <- useDataset(mart = protist.mart, dataset = "tgondii_eg_gene")
head(listFilters(toxo.mart))
listAttributes(toxo.mart)[1:45,]
genes.table.tg <- getBM(filters = "ensembl_gene_id", attributes = c("ensembl_gene_id", "description", "gene_biotype"), values = rownames(dc.data), mart = toxo.mart)
tail(genes.table.tg)
genes.table.tg <- getBM(filters = "ensembl_gene_id", attributes = c("ensembl_gene_id", "description", "gene_biotype"), values = rownames(dc.data), mart = toxo.mart)
dc.data <- read.csv("~/t.gondi_dc/data/cnt/cnt_mus_toxo_raw.csv", row.names = 1, header = T, check.names = FALSE)
genes.table.tg <- getBM(filters = "ensembl_gene_id", attributes = c("ensembl_gene_id", "description", "gene_biotype"), values = rownames(dc.data), mart = toxo.mart)
tail(genes.table.tg)
go.table.tg <- getBM(filters = "ensembl_gene_id", attributes = c("ensembl_gene_id", "go_id","name_1006", "namespace_1003", "gene_biotype"), values = rownames(dc.data), mart= toxo.mart)
colnames(go.table.tg) <- c("ensembl_gene_id", "go_id","go_term_name", "go_term_type", "gene_biotype")
head(go.table.tg)
go.table.tg$ensembl_gene_id <- sub("_", "-",go.table.tg$ensembl_gene_id)
head(go.table.tg)
write.table(go.table.tg, file = "~/t.gondi_dc/data/meta/go.table.tg.tab", sep= "\t")
write.table(go.table.tg, file = "~/t.gondi_dc/data/meta/go.table.tg.tsv", sep= "\t")
go.table.tg$ensembl_gene_id <- gsub("-", ".",go.table.tg$ensembl_gene_id)
#gr = graph
#ann = annotation table - default is the BioMart table used for annotations
get.toxo.table <- function(gr, ann = go.table.tg){
inf <- data.frame(clusters(gr)$membership)
colnames(inf) <- c("interaction_cluster")
inf$ensembl_gene_id <- rownames(inf)
int.table <- ann[ann$ensembl_gene_id %in% rownames(inf),]
tg.int <- dplyr::left_join(int.table,inf, by = "ensembl_gene_id")
return(tg.int)
}
tab1 <- get.toxo.table(gr.1)
tab1[1:5,1:5]
tab <- get.mouse.table(gr.1)
mart <- useMart("ensembl", dataset = "mmusculus_gene_ensembl")
reac <- useMart("REACTOME", host = "may2009.archive.ensembl.org")
dc.data.mus <- as.data.frame(se.dc.mus@assays$RNA@data)
mart <- useMart("ensembl", dataset = "mmusculus_gene_ensembl")
reac <- useMart("REACTOME", host = "may2009.archive.ensembl.org")
genes.table <- getBM(filters= "ensembl_gene_id", attributes= c("ensembl_gene_id", "external_gene_name", "description","gene_biotype", "chromosome_name","start_position"), values= rownames(dc.data.mus), mart= mart)
go.table <- getBM(filters= "external_gene_name", attributes= c("ensembl_gene_id", "external_gene_name", "description",  "go_id","name_1006", "namespace_1003","gene_biotype"), values= rownames(dc.data.mus), mart= mart)
colnames(go.table) <- c("ensembl_gene_id", "gene_symbol", "description", "go_id","go_term_name", "go_term_type", "gene_biotype")
head(go.table)
tab <- get.mouse.table(gr.1)
head(tab)
nrow(tab)
tab.u <- subset(tab, unique(tab$gene_symbol))
tab.u <- tab[unique(tab$gene_symbol)]
tab.u <- tab[unique(tab$gene_symbol),]
tab.u
unique(tab$gene_symbol)
duplicated(tab$gene_symbol)
#get unique genes for each interaction cluster
tab.n <- tab[,c(tab$gene_symbol,tab$interaction_cluster)]
#get unique genes for each interaction cluster
tab.n <- tab[c(tab$gene_symbol,tab$interaction_cluster),]
tab.n
#get unique genes for each interaction cluster
tab.n <- tab[,c(tab$gene_symbol,tab$interaction_cluster),]
#get unique genes for each interaction cluster
tab.n <- tab[,c(tab$gene_symbol,tab$interaction_cluster)]
#get unique genes for each interaction cluster
tab.n <- data.frame(gene = tab$gene_symbol, interaction.c = tab$interaction_cluster)
tab.n
tab.n <- unique(tab.n)
tab.n
nrow(tab.n)
tab.n <- tab.n[order(tab.n$interaction.c),]
tab.n
library(gprofiler2)
?gost
tab.n[tab.n[,2] == 1]
tab.n[tab.n[,2] == 1,]
golysis <- function(data, cluster){
dat <- data[data[,2] == cluster,]
gost(query = dat, organism = "mmusculus", sources = "GO:BP")
}
golysis(tab.n, 1)
data[data[,2] == cluster,]
tab.n[[,2] == cluster,]
tab.n[tab.n[,2] == cluster,]
tab.n[tab.n[,2] == 1,]
subset.markers.l
tab.n[tab.n[,2] == cluster,]
tab.n[tab.n[,2] == 1,]
tab.n[tab.n[,2] == 1,]
tab.n[tab.n[,2] == 1,]
tab.n[,2[tab.n[,2] == 1,]]
tab.n[,2[tab.n[,2] == 1,],]
tab.n[,[tab.n[,2] == 1,]]
tab.n[tab.n[,2] == 1,]
tab.n[tab.n[,2] == 1,][,2]
tab.n[tab.n[,2] == 1,][,1]
golysis <- function(data, cluster){
dat <- list(data[data[,2] == cluster,][,1])
gost(query = dat, organism = "mmusculus", sources = "GO:BP")
}
golysis(tab.n, 1)
golysis <- function(data, cluster){
dat <- list(data[data[,2] == cluster,][,1])
gost(query = dat, organism = "mmusculus", sources = "GO:BP", significant = F)
}
golysis(tab.n, 1)
golysis <- function(data, cluster){
dat <- list(data[data[,2] == cluster,][,1])
res <- gost(query = dat, organism = "mmusculus", sources = "GO:BP", significant = F)
g <- ggplot(head(res$result, 10), aes(reorder(term_name, -log10(p_value)), -log10(p_value))) +
geom_bar(stat = "identity", color = "black", fill = "darkblue") +
coord_flip() +
#scale_fill_gradientn(name = "Enrichment Score",colours =   RColorBrewer::brewer.pal(n = 20, name = "Reds")) +
scale_y_continuous() +
xlab("Biological Process")+
ylab("Enrichment Score") +
theme(axis.text.y = element_text(size = 12), axis.title = element_blank(), panel.background = element_blank())
return(g)
}
golysis(tab.n, 1)
golysis(tab.n, 2)
golysis(tab.n, 3)
golysis(tab.n, 4)
golysis(tab.n, 5)
golysis(tab.n, 6)
golysis(tab.n, 7)
golysis(tab.n, 8)
golysis(tab.n, 9)
golysis(tab.n, 10)
golysis(tab.n, 11)
golysis(tab.n, 12)
golysis(tab.n, 13)
golysis(tab.n, 14)
golysis(tab.n, 15)
golysis(tab.n, 16)
golysis(tab.n, 17)
golysis(tab.n, 18)
#run cluster-wise gene ontologies
max(tab.n$interaction.c)
min(tab.n$interaction.c)
